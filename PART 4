<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Bouncing Balls with Evil Circle</title>
<style>
    body {
        margin: 0;
        overflow: hidden;
    }

    canvas {
        display: block;
        background-color: black;
    }

    p {
        position: absolute;
        margin: 0;
        top: 35px;
        right: 5px;
        color: #aaa;
    }
</style>
</head>
<body>
<h1>Bouncing Balls</h1>
<canvas id="canvas"></canvas>
<p id="ball-count">Ball count: </p>

<script>
const canvas = document.getElementById("canvas");
const ctx = canvas.getContext("2d");
const width = canvas.width = window.innerWidth;
const height = canvas.height = window.innerHeight;
const balls = [];
let ballCount = 0;

class Shape {
    constructor(x, y, velX, velY) {
        this.x = x;
        this.y = y;
        this.velX = velX;
        this.velY = velY;
    }
}

class Ball extends Shape {
    constructor(x, y, velX, velY, size, color) {
        super(x, y, velX, velY);
        this.color = color;
        this.size = size;
        this.exists = true;
    }

    draw() {
        if (this.exists) {
            ctx.beginPath();
            ctx.fillStyle = this.color;
            ctx.arc(this.x, this.y, this.size, 0, 2 * Math.PI);
            ctx.fill();
        }
    }

    update() {
        if ((this.x + this.size) >= width || (this.x - this.size) <= 0) {
            this.velX = -(this.velX);
        }

        if ((this.y + this.size) >= height || (this.y - this.size) <= 0) {
            this.velY = -(this.velY);
        }

        this.x += this.velX;
        this.y += this.velY;
    }

    collisionDetect() {
        for (const ball of balls) {
            if (!(this === ball) && ball.exists) {
                const dx = this.x - ball.x;
                const dy = this.y - ball.y;
                const distance = Math.sqrt(dx * dx + dy * dy);

                if (distance < this.size + ball.size) {
                    ball.color = this.color = randomRGB();
                }
            }
        }
    }
}

class EvilCircle extends Shape {
    constructor(x, y) {
        super(x, y, 20, 20);
        this.color = 'white';
        this.size = 10;
    }

    draw() {
        ctx.lineWidth = 3;
        ctx.strokeStyle = this.color;
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, 2 * Math.PI);
        ctx.stroke();
    }

    checkBounds() {
        if ((this.x + this.size) >= width || (this.x - this.size) <= 0) {
            this.x -= this.velX;
        }

        if ((this.y + this.size) >= height || (this.y - this.size) <= 0) {
            this.y -= this.velY;
        }
    }

    collisionDetect() {
        for (const ball of balls) {
            if (ball.exists) {
                const dx = this.x - ball.x;
                const dy = this.y - ball.y;
                const distance = Math.sqrt(dx * dx + dy * dy);

                if (distance < this.size + ball.size) {
                    ball.exists = false;
                    ballCount--;
                    updateBallCount();
                }
            }
        }
    }
}

function random(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

function randomRGB() {
    return `rgb(${random(0, 255)}, ${random(0, 255)}, ${random(0, 255)})`;
}

function updateBallCount() {
    document.getElementById('ball-count').textContent = `Ball count: ${ballCount}`;
}

window.addEventListener('keydown', (e) => {
    switch (e.key) {
        case 'a':
            evilCircle.x -= evilCircle.velX;
            break;
        case 'd':
            evilCircle.x += evilCircle.velX;
            break;
        case 'w':
            evilCircle.y -= evilCircle.velY;
            break;
        case 's':
            evilCircle.y += evilCircle.velY;
            break;
    }
});

function loop() {
    ctx.fillStyle = 'rgba(0, 0, 0, 0.25)';
    ctx.fillRect(0, 0, width, height);

    while (balls.length < 25) {
        const size = random(10, 20);
        const ball = new Ball(
            random(0 + size, width - size),
            random(0 + size, height - size),
            random(-7, 7),
            random(-7, 7),
            size,
            randomRGB()
        );

        balls.push(ball);
        ballCount++;
        updateBallCount();
    }

    for (const ball of balls) {
        ball.draw();
        ball.update();
        ball.collisionDetect();
    }

    evilCircle.draw();
    evilCircle.checkBounds();
    evilCircle.collisionDetect();

    requestAnimationFrame(loop);
}

const evilCircle = new EvilCircle(width / 2, height / 2);
loop();
</script>
</body>
</html>
